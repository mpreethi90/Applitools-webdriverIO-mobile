"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require("events");

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var interval = 500;

var Monitor = function (_EventEmitter) {
  _inherits(Monitor, _EventEmitter);

  function Monitor(adb) {
    _classCallCheck(this, Monitor);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Monitor).call(this));

    _this.adb = adb;
    _this.power = _this.adb.power();
    _this.interval = _this.start();
    return _this;
  }

  _createClass(Monitor, [{
    key: "start",
    value: function start() {
      var _this2 = this;

      return setInterval(function (_) {
        _this2.monitor();
      }, interval);
    }
  }, {
    key: "info",
    value: function info() {
      return this.power;
    }
  }, {
    key: "monitor",
    value: function monitor() {
      var power = this.adb.power();
      if (power["battery_level"] != this.power["battery_level"]) {
        this.emit("battery", power);
      }
      if (power["display_power"] != this.power["display_power"]) {
        this.emit("display", power);
      }
      this.power = power;
    }
  }, {
    key: "cancel",
    value: function cancel() {
      clearInterval(this.interval);
    }
  }]);

  return Monitor;
}(_events2.default);

exports.default = Monitor;
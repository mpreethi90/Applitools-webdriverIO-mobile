"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeCroppedBase64Image = makeCroppedBase64Image;

var _constants = require("../helpers/constants");

var _logger = require("../helpers/logger");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  createCanvas,
  loadImage
} = require('canvas');
/**
 * Save a (cropped) canvas screen
 *
 * @param {string}  screenshot
 * @param {object}  rectangles
 * @param {object}  resizeDimensions
 *
 * @return {Promise<string>}
 */


async function makeCroppedBase64Image(screenshot, rectangles, resizeDimensions) {
  const {
    top,
    right,
    bottom,
    left
  } = _objectSpread({}, _constants.DEFAULT_RESIZE_DIMENSIONS, {}, resizeDimensions);

  const {
    height,
    width,
    x,
    y
  } = rectangles;
  const canvasWidth = width + left + right;
  const canvasHeight = height + top + bottom;
  const canvas = createCanvas(canvasWidth, canvasHeight);
  const image = await loadImage(`data:image/png;base64,${screenshot}`);
  const ctx = canvas.getContext('2d');
  let sourceXStart = x - left;
  let sourceYStart = y - top;

  if (sourceXStart < 0) {
    _logger.nativeAppCompareLog.warn(`
#####################################################################################
 THE RESIZE DIMENSION LEFT '${left}' MADE THE CROPPING GO OUT OF
 THE IMAGE BOUNDARIES RESULTING IN AN IMAGE STARTPOSITION '${sourceXStart}'.
 THIS HAS BEEN DEFAULTED TO '0'
#####################################################################################
`);

    sourceXStart = 0;
  }

  if (sourceYStart < 0) {
    _logger.nativeAppCompareLog.warn(`
#####################################################################################
 THE RESIZE DIMENSION LEFT '${top}' MADE THE CROPPING GO OUT OF
 THE IMAGE BOUNDARIES RESULTING IN AN IMAGE STARTPOSITION '${sourceYStart}'.
 THIS HAS BEEN DEFAULTED TO '0'
#####################################################################################
`);

    sourceYStart = 0;
  }

  ctx.drawImage(image, // Start at x/y pixels from the left and the top of the image (crop)
  sourceXStart, sourceYStart, // 'Get' a (w * h) area from the source image (crop)
  canvasWidth, canvasHeight, // Place the result at 0, 0 in the canvas,
  0, 0, // With as width / height: 100 * 100 (scale)
  canvasWidth, canvasHeight);
  return canvas.toDataURL().replace(/^data:image\/png;base64,/, '');
}
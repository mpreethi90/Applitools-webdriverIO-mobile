"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDeviceInfo = getDeviceInfo;

var _utils = require("../helpers/utils");

var _constants = require("../helpers/constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let DEVICE_INFO = null;
/**
 * Get the device info and store it to a global if needed
 *
 * @param   {string}  screenshot
 *
 * @return  {Promise<{
 *      dpr: number,
 *      screenSize: {
 *          height: number,
 *          width: number,
 *      },
 *      screenshotHeight: number,
 *      screenshotWidth: number,
 *      isPortrait: boolean,
 *      isIphoneXSeries: boolean,
 *      isLargeIphoneXSeries: boolean,
 *      rectangles: {
 *          androidNavigationBar: {
 *              bottom: number,
 *              right: number,
 *              left: number,
 *              top: number,
 *          }
 *          iOSHomeBar: {
 *              bottom: number,
 *              right: number,
 *              left: number,
 *              top: number,
 *          }
 *          statusBar: {
 *              bottom: number,
 *              right: number,
 *              left: number,
 *              top: number,
 *          }
 *      }
 * }>}
 */

async function getDeviceInfo(screenshot) {
  if (DEVICE_INFO) {
    return DEVICE_INFO;
  } // A lot of data is already given back in the capabilities from the driver
  // Android gives back extra which we will use:
  // - pixelRatio
  // - statBarHeight
  // - viewportRect


  const {
    pixelRatio,
    statBarHeight,
    viewportRect
  } = driver.capabilities;
  const {
    height: screenshotHeight,
    width: screenshotWidth
  } = (0, _utils.getScreenshotSize)(screenshot);
  const screenSize = await driver.getWindowSize();
  const dpr = pixelRatio || screenshotWidth / screenSize.width;
  const isIphoneXSeries = (0, _utils.determineIphoneXSeries)(screenSize);
  const isLargeIphoneXSeries = (0, _utils.determineLargeIphoneXSeries)(screenSize);
  const isPortrait = screenSize.height > screenSize.width;
  const androidNavigationBar = viewportRect ? {
    bottom: screenshotHeight,
    left: 0,
    right: screenshotWidth,
    top: viewportRect.height + statBarHeight
  } : {
    bottom: 0,
    left: 0,
    right: 0,
    top: 0
  };

  const iosRectangles = _objectSpread({}, isLargeIphoneXSeries ? _constants.IOS_RECTANGLES.X_LARGE : isIphoneXSeries ? _constants.IOS_RECTANGLES.X : _constants.IOS_RECTANGLES.DEFAULT);

  DEVICE_INFO = {
    dpr,
    screenSize,
    screenshotHeight,
    screenshotWidth,
    isPortrait,
    isIphoneXSeries,
    isLargeIphoneXSeries,
    rectangles: {
      androidNavigationBar,
      // @TODO: if orientation is implemented also add it here
      iOSHomeBar: (0, _utils.multiplyIosObjectValuesAgainstDPR)(iosRectangles.HOME_BAR.PORTRAIT, dpr),
      statusBar: {
        bottom: statBarHeight || iosRectangles.STATUS_BAR * dpr,
        left: 0,
        right: screenshotWidth,
        top: 0
      }
    }
  };
  return DEVICE_INFO;
}
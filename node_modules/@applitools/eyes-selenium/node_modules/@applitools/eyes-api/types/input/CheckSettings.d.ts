import { AccessibilityRegionType, AccessibilityRegionTypeEnum } from '../enums/AccessibilityRegionType';
import { MatchLevel, MatchLevelEnum } from '../enums/MatchLevel';
import { Region } from './Region';
declare type RegionReference<TElement, TSelector> = Region | ElementReference<TElement, TSelector>;
declare type ElementReference<TElement, TSelector> = TElement | TSelector;
declare type FrameReference<TElement, TSelector> = ElementReference<TElement, TSelector> | string | number;
declare type ContextReference<TElement, TSelector> = {
    frame: FrameReference<TElement, TSelector>;
    scrollRootElement?: ElementReference<TElement, TSelector>;
};
declare type FloatingRegionReference<TElement, TSelector> = {
    region: RegionReference<TElement, TSelector>;
    maxUpOffset?: number;
    maxDownOffset?: number;
    maxLeftOffset?: number;
    maxRightOffset?: number;
};
declare type AccessibilityRegionReference<TElement, TSelector> = {
    region: RegionReference<TElement, TSelector>;
    type?: AccessibilityRegionType;
};
declare type CheckSettingsSpec<TElement = unknown, TSelector = unknown> = {
    isElement(value: any): value is TElement;
    isSelector(value: any): value is TSelector;
};
export declare type CheckSettings<TElement, TSelector> = {
    name?: string;
    region?: RegionReference<TElement, TSelector>;
    frames?: (ContextReference<TElement, TSelector> | FrameReference<TElement, TSelector>)[];
    scrollRootElement?: ElementReference<TElement, TSelector>;
    fully?: boolean;
    matchLevel?: MatchLevel;
    useDom?: boolean;
    sendDom?: boolean;
    enablePatterns?: boolean;
    ignoreDisplacements?: boolean;
    ignoreCaret?: boolean;
    ignoreRegions?: RegionReference<TElement, TSelector>[];
    layoutRegions?: RegionReference<TElement, TSelector>[];
    strictRegions?: RegionReference<TElement, TSelector>[];
    contentRegions?: RegionReference<TElement, TSelector>[];
    floatingRegions?: (FloatingRegionReference<TElement, TSelector> | RegionReference<TElement, TSelector>)[];
    accessibilityRegions?: (AccessibilityRegionReference<TElement, TSelector> | RegionReference<TElement, TSelector>)[];
    disableBrowserFetching?: boolean;
    layoutBreakpoints?: boolean | number[];
    visualGridOptions?: {
        [key: string]: any;
    };
    hooks?: {
        beforeCaptureScreenshot: string;
    };
    renderId?: string;
    variationGroupId?: string;
    timeout?: number;
};
export declare type Target<TElement, TSelector> = {
    window(): CheckSettingsFluent<TElement, TSelector>;
    region(region: RegionReference<TElement, TSelector>): CheckSettingsFluent<TElement, TSelector>;
    frame(context: ContextReference<TElement, TSelector>): CheckSettingsFluent<TElement, TSelector>;
    frame(frame: FrameReference<TElement, TSelector>, scrollRootElement?: ElementReference<TElement, TSelector>): CheckSettingsFluent<TElement, TSelector>;
};
export declare class CheckSettingsFluent<TElement = unknown, TSelector = unknown> {
    /** @internal */
    static window(): CheckSettingsFluent;
    /** @internal */
    static region(region: unknown): CheckSettingsFluent;
    /** @internal */
    static frame(contextOrFrame: unknown, scrollRootElement?: unknown): CheckSettingsFluent;
    protected static readonly _spec: CheckSettingsSpec;
    protected get _spec(): CheckSettingsSpec<TElement, TSelector>;
    private _settings;
    private _isFrameReference;
    private _isRegionReference;
    private _isElementReference;
    constructor(settings?: CheckSettings<TElement, TSelector>);
    /** @undocumented */
    name(name: string): this;
    withName(name: string): this;
    region(region: RegionReference<TElement, TSelector>): this;
    frame(context: ContextReference<TElement, TSelector>): this;
    frame(frame: FrameReference<TElement, TSelector>, scrollRootElement?: ElementReference<TElement, TSelector>): this;
    ignoreRegion(ignoreRegion: RegionReference<TElement, TSelector>): this;
    ignoreRegions(...ignoreRegions: RegionReference<TElement, TSelector>[]): this;
    /** @deprecated */
    ignore(ignoreRegion: RegionReference<TElement, TSelector>): this;
    /** @deprecated */
    ignores(...ignoreRegions: RegionReference<TElement, TSelector>[]): this;
    layoutRegion(layoutRegion: RegionReference<TElement, TSelector>): this;
    layoutRegions(...layoutRegions: RegionReference<TElement, TSelector>[]): this;
    strictRegion(strictRegion: RegionReference<TElement, TSelector>): this;
    strictRegions(...regions: RegionReference<TElement, TSelector>[]): this;
    contentRegion(region: RegionReference<TElement, TSelector>): this;
    contentRegions(...regions: RegionReference<TElement, TSelector>[]): this;
    floatingRegion(region: FloatingRegionReference<TElement, TSelector>): this;
    floatingRegion(region: RegionReference<TElement, TSelector>, maxUpOffset?: number, maxDownOffset?: number, maxLeftOffset?: number, maxRightOffset?: number): this;
    floatingRegions(...regions: (FloatingRegionReference<TElement, TSelector> | RegionReference<TElement, TSelector>)[]): this;
    floatingRegions(maxOffset: number, ...regions: RegionReference<TElement, TSelector>[]): this;
    /** @deprecated */
    floating(region: FloatingRegionReference<TElement, TSelector>): this;
    /** @deprecated */
    floating(region: RegionReference<TElement, TSelector>): this;
    /** @deprecated */
    floatings(...regions: (FloatingRegionReference<TElement, TSelector> | RegionReference<TElement, TSelector>)[]): this;
    /** @deprecated */
    floatings(maxOffset: number, ...regions: RegionReference<TElement, TSelector>[]): this;
    accessibilityRegion(region: AccessibilityRegionReference<TElement, TSelector>): this;
    accessibilityRegion(region: RegionReference<TElement, TSelector>, type?: AccessibilityRegionTypeEnum): this;
    accessibilityRegions(...regions: (AccessibilityRegionReference<TElement, TSelector> | RegionReference<TElement, TSelector>)[]): this;
    accessibilityRegions(type: AccessibilityRegionTypeEnum, ...regions: RegionReference<TElement, TSelector>[]): this;
    scrollRootElement(scrollRootElement: ElementReference<TElement, TSelector>): this;
    fully(fully?: boolean): this;
    /** @deprecated */
    stitchContent(stitchContent?: boolean): this;
    matchLevel(matchLevel: MatchLevelEnum): this;
    layout(): this;
    exact(): this;
    strict(): this;
    content(): this;
    useDom(useDom?: boolean): this;
    sendDom(sendDom?: boolean): this;
    enablePatterns(enablePatterns?: boolean): this;
    ignoreDisplacements(ignoreDisplacements?: boolean): this;
    ignoreCaret(ignoreCaret?: boolean): this;
    disableBrowserFetching(disableBrowserFetching: boolean): this;
    layoutBreakpoints(layoutBreakpoints?: boolean | number[]): this;
    hook(name: string, script: string): this;
    beforeRenderScreenshotHook(script: string): this;
    /** @deprecated */
    webHook(script: string): this;
    visualGridOption(key: string, value: any): this;
    visualGridOptions(options: {
        [key: string]: any;
    }): this;
    renderId(renderId: string): this;
    variationGroupId(variationGroupId: string): this;
    timeout(timeout: number): this;
    /** @internal */
    toObject(): CheckSettings<TElement, TSelector>;
    /** @internal */
    toJSON(): CheckSettings<TElement, TSelector>;
    /** @internal */
    toString(): string;
}
export {};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassicRunner = exports.VisualGridRunner = exports.EyesRunner = void 0;
const utils = require("@applitools/utils");
const TestResultsStatus_1 = require("./enums/TestResultsStatus");
const NewTestError_1 = require("./errors/NewTestError");
const DiffsFoundError_1 = require("./errors/DiffsFoundError");
const TestFailedError_1 = require("./errors/TestFailedError");
const RunnerOptions_1 = require("./input/RunnerOptions");
const TestResults_1 = require("./output/TestResults");
const TestResultsSummary_1 = require("./output/TestResultsSummary");
class EyesRunner {
    constructor() {
        this._eyes = [];
    }
    /** @internal */
    attach(eyes, spec) {
        if (!this._spec)
            this._spec = spec;
        this._eyes.push(eyes);
    }
    /** @internal */
    async makeEyes(config) {
        if (!this._manager)
            this._manager = this._spec.makeManager(this.config);
        return await this._manager.makeEyes(config);
    }
    async getAllTestResults(throwErr = false) {
        if (!this._manager)
            return new TestResultsSummary_1.TestResultsSummaryData([]);
        const results = await this._manager.closeAllEyes();
        const [eyes] = this._eyes;
        const summary = new TestResultsSummary_1.TestResultsSummaryData(results.map(result => {
            const results = new TestResults_1.TestResultsData(result, options => this._spec.deleteTest(Object.assign(Object.assign({}, options), { serverUrl: eyes.configuration.serverUrl, apiKey: eyes.configuration.apiKey, proxy: eyes.configuration.proxy })));
            if (results.status === TestResultsStatus_1.TestResultsStatus.Unresolved) {
                if (results.isNew)
                    return new NewTestError_1.NewTestError(results);
                else
                    return new DiffsFoundError_1.DiffsFoundError(results);
            }
            else if (results.status === TestResultsStatus_1.TestResultsStatus.Failed) {
                return new TestFailedError_1.TestFailedError(results);
            }
            else {
                return results;
            }
        }));
        if (throwErr) {
            for (const result of summary) {
                if (result.exception)
                    throw result.exception;
            }
        }
        return summary;
    }
}
exports.EyesRunner = EyesRunner;
class VisualGridRunner extends EyesRunner {
    constructor(optionsOrLegacyConcurrency) {
        super();
        if (utils.types.isNumber(optionsOrLegacyConcurrency)) {
            this._legacyConcurrency = optionsOrLegacyConcurrency;
        }
        else if (optionsOrLegacyConcurrency) {
            const options = optionsOrLegacyConcurrency instanceof RunnerOptions_1.RunnerOptionsFluent
                ? optionsOrLegacyConcurrency.toJSON()
                : optionsOrLegacyConcurrency;
            this._testConcurrency = options.testConcurrency;
        }
    }
    /** @internal */
    get config() {
        return {
            type: 'vg',
            concurrency: this._testConcurrency || this._legacyConcurrency,
            legacy: Boolean(this._legacyConcurrency),
        };
    }
    get testConcurrency() {
        return this._testConcurrency;
    }
    /** @deprecated */
    get legacyConcurrency() {
        return this._legacyConcurrency;
    }
    /** @deprecated */
    getConcurrentSessions() {
        return this._legacyConcurrency;
    }
}
exports.VisualGridRunner = VisualGridRunner;
class ClassicRunner extends EyesRunner {
    /** @internal */
    get config() {
        return { type: 'classic' };
    }
}
exports.ClassicRunner = ClassicRunner;
//# sourceMappingURL=Runners.js.map
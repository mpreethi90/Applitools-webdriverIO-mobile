"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const utils = require("@applitools/utils");
const logger_1 = require("@applitools/logger");
const LogHandler_1 = require("./input/LogHandler");
class Logger {
    constructor(loggerOrOptionsOrShow = false) {
        /** @internal */
        this.isLogger = true;
        if (utils.types.isBoolean(loggerOrOptionsOrShow)) {
            return new Logger({ show: loggerOrOptionsOrShow });
        }
        else if (utils.types.has(loggerOrOptionsOrShow, ['log', 'console'])) {
            this._logger = loggerOrOptionsOrShow;
        }
        else {
            this._show = loggerOrOptionsOrShow.show;
            this._label = loggerOrOptionsOrShow.label;
            this._handler = loggerOrOptionsOrShow.handler;
        }
    }
    _makeLogger() {
        return logger_1.default({
            handler: this._handler instanceof LogHandler_1.LogHandlerData ? this._handler.toJSON() : undefined,
            level: this._show ? 'info' : 'silent',
            label: this._label,
        });
    }
    /** @internal */
    get console() {
        return this._logger.console;
    }
    getLogHandler() {
        if (!this._handler) {
            return new LogHandler_1.NullLogHandlerData();
        }
        else if (!utils.types.has(this._handler, 'type')) {
            return this._handler;
        }
        else if (this._handler.type === 'file') {
            return new LogHandler_1.FileLogHandlerData(true, this._handler.filename, this._handler.append);
        }
        else if (this._handler.type === 'console') {
            return new LogHandler_1.ConsoleLogHandlerData(true);
        }
    }
    setLogHandler(handler) {
        this._handler = handler;
    }
    verbose(...messages) {
        if (!this._logger)
            this._logger = this._makeLogger();
        messages.forEach(message => this._logger.log(message));
    }
    log(...messages) {
        if (!this._logger)
            this._logger = this._makeLogger();
        messages.forEach(message => this._logger.log(message));
    }
    warn(...messages) {
        if (!this._logger)
            this._logger = this._makeLogger();
        messages.forEach(message => this._logger.warn(message));
    }
    error(...messages) {
        if (!this._logger)
            this._logger = this._makeLogger();
        messages.forEach(message => this._logger.error(message));
    }
    fatal(...messages) {
        if (!this._logger)
            this._logger = this._makeLogger();
        messages.forEach(message => this._logger.fatal(message));
    }
    open() {
        this._logger.open();
    }
    close() {
        this._logger.open();
    }
    extend(label, color) {
        if (this._logger)
            return new Logger(this._logger.extend(label, color));
        return new Logger({ show: this._show, label, handler: this._handler });
    }
}
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map
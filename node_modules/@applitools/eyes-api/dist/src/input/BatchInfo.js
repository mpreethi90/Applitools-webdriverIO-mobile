"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchInfoData = void 0;
const utils = require("@applitools/utils");
const PropertyData_1 = require("./PropertyData");
class BatchInfoData {
    constructor(batchOrName, startedAt, id) {
        var _a, _b, _c, _d, _e, _f;
        this._batch = {};
        if (utils.types.isNull(batchOrName) || utils.types.isString(batchOrName)) {
            return new BatchInfoData({ name: batchOrName, id, startedAt: startedAt });
        }
        this.id = (_a = batchOrName.id) !== null && _a !== void 0 ? _a : utils.general.getEnvValue('BATCH_ID');
        this.name = (_b = batchOrName.name) !== null && _b !== void 0 ? _b : utils.general.getEnvValue('BATCH_NAME');
        this.sequenceName = (_c = batchOrName.sequenceName) !== null && _c !== void 0 ? _c : utils.general.getEnvValue('BATCH_SEQUENCE', 'string');
        this.startedAt = (_d = batchOrName.startedAt) !== null && _d !== void 0 ? _d : new Date();
        this.notifyOnCompletion =
            (_f = (_e = batchOrName.notifyOnCompletion) !== null && _e !== void 0 ? _e : utils.general.getEnvValue('BATCH_NOTIFY', 'boolean')) !== null && _f !== void 0 ? _f : false;
        this.properties = batchOrName.properties;
    }
    get id() {
        return this._batch.id;
    }
    set id(id) {
        utils.guard.isString(id, { name: 'id', strict: false });
        this._batch.id = id;
    }
    getId() {
        return this.id;
    }
    setId(id) {
        this.id = id;
        return this;
    }
    get name() {
        return this._batch.name;
    }
    set name(name) {
        utils.guard.isString(name, { name: 'name', strict: false });
        this._batch.name = name;
    }
    getName() {
        return this.name;
    }
    setName(name) {
        this.name = name;
        return this;
    }
    get sequenceName() {
        return this._batch.sequenceName;
    }
    set sequenceName(sequenceName) {
        utils.guard.isString(sequenceName, { name: 'sequenceName', strict: false });
        this._batch.sequenceName = sequenceName;
    }
    getSequenceName() {
        return this.sequenceName;
    }
    setSequenceName(sequenceName) {
        this.sequenceName = sequenceName;
        return this;
    }
    get startedAt() {
        return this._batch.startedAt;
    }
    set startedAt(startedAt) {
        this._batch.startedAt = new Date(startedAt);
    }
    getStartedAt() {
        return this.startedAt;
    }
    setStartedAt(startedAt) {
        this.startedAt = startedAt;
        return this;
    }
    get notifyOnCompletion() {
        return this._batch.notifyOnCompletion;
    }
    set notifyOnCompletion(notifyOnCompletion) {
        utils.guard.isBoolean(notifyOnCompletion, { name: 'notifyOnCompletion', strict: false });
        this._batch.notifyOnCompletion = notifyOnCompletion;
    }
    getNotifyOnCompletion() {
        return this.notifyOnCompletion;
    }
    setNotifyOnCompletion(notifyOnCompletion) {
        this.notifyOnCompletion = notifyOnCompletion;
        return this;
    }
    get properties() {
        return this._batch.properties;
    }
    set properties(properties) {
        utils.guard.isArray(properties, { name: 'properties', strict: false });
        this._batch.properties = properties;
    }
    getProperties() {
        var _a, _b;
        return (_b = (_a = this.properties) === null || _a === void 0 ? void 0 : _a.map(property => new PropertyData_1.PropertyDataData(property))) !== null && _b !== void 0 ? _b : [];
    }
    setProperties(properties) {
        this.properties = properties;
        return this;
    }
    addProperty(property) {
        this.properties.push(property);
        return this;
    }
    /** @internal */
    toObject() {
        return this._batch;
    }
    /** @internal */
    toJSON() {
        return utils.general.toJSON(this._batch);
    }
    /** @internal */
    toString() {
        return utils.general.toString(this);
    }
}
exports.BatchInfoData = BatchInfoData;
//# sourceMappingURL=BatchInfo.js.map
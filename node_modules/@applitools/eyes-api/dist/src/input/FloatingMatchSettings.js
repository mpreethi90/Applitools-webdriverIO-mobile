"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FloatingMatchSettingsData = void 0;
const utils = require("@applitools/utils");
const Region_1 = require("./Region");
/** @undocumented */
class FloatingMatchSettingsData {
    constructor(settingsOrRegionOrX, y, width, height, maxUpOffset, maxDownOffset, maxLeftOffset, maxRightOffset) {
        if (utils.types.isNumber(settingsOrRegionOrX)) {
            return new FloatingMatchSettingsData({
                region: { x: settingsOrRegionOrX, y, width, height },
                maxUpOffset,
                maxDownOffset,
                maxLeftOffset,
                maxRightOffset,
            });
        }
        else if (!utils.types.has(settingsOrRegionOrX, 'region')) {
            return new FloatingMatchSettingsData({ region: settingsOrRegionOrX });
        }
        this.region = settingsOrRegionOrX.region;
        this.maxUpOffset = settingsOrRegionOrX.maxUpOffset;
        this.maxDownOffset = settingsOrRegionOrX.maxDownOffset;
        this.maxLeftOffset = settingsOrRegionOrX.maxLeftOffset;
        this.maxRightOffset = settingsOrRegionOrX.maxRightOffset;
    }
    get region() {
        return this._settings.region;
    }
    set region(region) {
        utils.guard.isObject(region, { name: 'region' });
        this._settings.region = new Region_1.RegionData(region);
    }
    getRegion() {
        return new Region_1.RegionData(this.region);
    }
    setRegion(region) {
        this.region = region;
    }
    getLeft() {
        return this.region.x;
    }
    setLeft(left) {
        this.region.x = left;
    }
    getTop() {
        return this.region.y;
    }
    setTop(top) {
        this.region.y = top;
    }
    getWidth() {
        return this.region.width;
    }
    setWidth(width) {
        this.region.width = width;
    }
    getHeight() {
        return this.region.height;
    }
    setHeight(height) {
        this.region.height = height;
    }
    get maxUpOffset() {
        return this._settings.maxUpOffset;
    }
    set maxUpOffset(maxUpOffset) {
        utils.guard.isNumber(maxUpOffset, { name: 'maxUpOffset' });
        this._settings.maxUpOffset = maxUpOffset;
    }
    getMaxUpOffset() {
        return this.maxUpOffset;
    }
    setMaxUpOffset(maxUpOffset) {
        this.maxUpOffset = maxUpOffset;
    }
    get maxDownOffset() {
        return this._settings.maxDownOffset;
    }
    set maxDownOffset(maxDownOffset) {
        utils.guard.isNumber(maxDownOffset, { name: 'maxDownOffset' });
        this._settings.maxDownOffset = maxDownOffset;
    }
    getMaxDownOffset() {
        return this.maxDownOffset;
    }
    setMaxDownOffset(maxDownOffset) {
        this.maxDownOffset = maxDownOffset;
    }
    get maxLeftOffset() {
        return this._settings.maxLeftOffset;
    }
    set maxLeftOffset(maxLeftOffset) {
        utils.guard.isNumber(maxLeftOffset, { name: 'maxLeftOffset' });
        this._settings.maxLeftOffset = maxLeftOffset;
    }
    getMaxLeftOffset() {
        return this.maxLeftOffset;
    }
    setMaxLeftOffset(maxLeftOffset) {
        this.maxLeftOffset = maxLeftOffset;
    }
    get maxRightOffset() {
        return this._settings.maxRightOffset;
    }
    set maxRightOffset(maxRightOffset) {
        utils.guard.isNumber(maxRightOffset, { name: 'maxRightOffset' });
        this._settings.maxRightOffset = maxRightOffset;
    }
    getMaxRightOffset() {
        return this.maxRightOffset;
    }
    setMaxRightOffset(maxRightOffset) {
        this.maxRightOffset = maxRightOffset;
    }
    /** @internal */
    toObject() {
        return this._settings;
    }
    /** @internal */
    toJSON() {
        return utils.general.toJSON(this._settings);
    }
    /** @internal */
    toString() {
        return utils.general.toString(this);
    }
}
exports.FloatingMatchSettingsData = FloatingMatchSettingsData;
//# sourceMappingURL=FloatingMatchSettings.js.map
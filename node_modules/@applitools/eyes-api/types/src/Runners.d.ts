import type * as types from '@applitools/types';
import { RunnerOptions, RunnerOptionsFluent } from './input/RunnerOptions';
import { TestResultsSummaryData } from './output/TestResultsSummary';
import { Eyes } from './Eyes';
declare type EyesRunnerSpec<TDriver = unknown, TElement = unknown, TSelector = unknown> = types.Core<TDriver, TElement, TSelector>;
export declare abstract class EyesRunner {
    protected _spec: EyesRunnerSpec<unknown, unknown, unknown>;
    private _manager;
    private _eyes;
    /** @internal */
    abstract get config(): types.Configs.EyesManagerConfig;
    /** @internal */
    attach<TDriver, TElement, TSelector>(eyes: Eyes<TDriver, TElement, TSelector>, spec: EyesRunnerSpec<TDriver, TElement, TSelector>): void;
    /** @internal */
    makeEyes<TDriver, TElement, TSelector>(config: types.Configs.EyesMakeConfig<TDriver, TElement, TSelector>): Promise<types.Eyes<TElement, TSelector>>;
    getAllTestResults(throwErr?: boolean): Promise<TestResultsSummaryData>;
}
export declare class VisualGridRunner extends EyesRunner {
    private _testConcurrency;
    private _legacyConcurrency;
    constructor(options?: RunnerOptions);
    /** @deprecated */
    constructor(options?: RunnerOptionsFluent);
    /** @deprecated */
    constructor(legacyConcurrency?: number);
    /** @internal */
    get config(): types.Configs.EyesManagerConfig<'vg'>;
    get testConcurrency(): number;
    /** @deprecated */
    get legacyConcurrency(): number;
    /** @deprecated */
    getConcurrentSessions(): number;
}
export declare class ClassicRunner extends EyesRunner {
    /** @internal */
    get config(): types.Configs.EyesManagerConfig<'classic'>;
}
export {};
//# sourceMappingURL=Runners.d.ts.map
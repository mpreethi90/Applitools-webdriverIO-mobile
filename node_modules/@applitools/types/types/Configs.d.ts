import * as Options from './Options';
import * as Settings from './Settings';
export declare type EyesManagerConfig<TType extends 'vg' | 'classic' = 'vg' | 'classic'> = {
    type: TType;
    concurrency?: TType extends 'vg' ? number : never;
    legacy?: TType extends 'vg' ? boolean : never;
};
export declare type EyesMakeConfig<TDriver, TElement, TSelector> = {
    driver: TDriver;
    config?: EyesConfig<TElement, TSelector>;
    on?: (event: string, data?: Record<string, any>) => any;
};
export declare type EyesBaseConfig = {
    logs?: Options.LogHandler;
    debugScreenshots?: Options.DebugScreenshotHandler;
    agentId?: string;
    apiKey?: string;
    serverUrl?: string;
    proxy?: Options.Proxy;
    isDisabled?: boolean;
    connectionTimeout?: number;
    removeSession?: boolean;
    remoteEvents?: {
        serverUrl: string;
        accessKey?: string;
        timeout?: number;
    };
};
export declare type EyesOpenConfig = {
    appName?: string;
    testName?: string;
    displayName?: string;
    viewportSize?: Options.RectangleSize;
    sessionType?: Options.SessionType;
    properties?: Options.CustomProperty[];
    batch?: Options.Batch;
    defaultMatchSettings?: Settings.MatchSettings<Options.Region>;
    hostApp?: string;
    hostOS?: string;
    hostAppInfo?: string;
    hostOSInfo?: string;
    deviceInfo?: string;
    baselineEnvName?: string;
    environmentName?: string;
    branchName?: string;
    parentBranchName?: string;
    baselineBranchName?: string;
    compareWithParentBranch?: boolean;
    ignoreBaseline?: boolean;
    saveFailedTests?: boolean;
    saveNewTests?: boolean;
    saveDiffs?: boolean;
    dontCloseBatches?: boolean;
};
export declare type EyesCheckConfig = {
    sendDom?: boolean;
    matchTimeout?: number;
    forceFullPageScreenshot?: boolean;
};
export declare type EyesClassicConfig<TElement = unknown, TSelector = unknown> = {
    waitBeforeScreenshots?: number;
    stitchMode?: Options.StitchMode;
    hideScrollbars?: boolean;
    hideCaret?: boolean;
    stitchOverlap?: number;
    scrollRootElement?: TElement | TSelector;
    cut?: Options.ImageCropRect | Options.ImageCropRegion;
    rotation?: Options.ImageRotation;
    scaleRatio?: number;
};
export declare type EyesUFGConfig = {
    concurrentSessions?: number;
    browsersInfo?: (Options.DesktopBrowserRenderer | Options.ChromeEmulationDeviceRenderer | Options.IOSDeviceRenderer)[];
    visualGridOptions?: Record<string, any>;
    layoutBreakpoints?: boolean | number[];
    disableBrowserFetching?: boolean;
};
export declare type EyesConfig<TElement, TSelector> = EyesBaseConfig & EyesOpenConfig & EyesCheckConfig & EyesClassicConfig<TElement, TSelector> & EyesUFGConfig;
